{"version":3,"sources":["features/calculator/calculatorSlice.js","App.js","app/store.js","serviceWorker.js","theme.js","index.js"],"names":["initialState","options","title","insideSourceTown","distanceFromSourceTown","baseRate","perKm","selectedOption","actualKm","additionalStore","finalDf","calculatorSlice","createSlice","name","reducers","setSelectedOptions","state","action","payload","setActualKm","parseFloat","setFinalDf","setAdditionalStore","reset","actions","selectCalculator","calculator","App","useSelector","dispatch","useDispatch","className","Autocomplete","value","onChange","event","newValue","id","getOptionLabel","option","style","minWidth","maxWidth","marginTop","renderInput","params","TextField","label","variant","type","target","disabled","parseInt","fontWeight","Button","color","marginRight","onClick","additionalDf","store","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf70ce54.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  options: [\r\n    {\r\n      title: 'Within Apalit',\r\n      insideSourceTown: true,\r\n      distanceFromSourceTown: 0,\r\n      baseRate: 40.00,\r\n      perKm: 10.00,\r\n    },\r\n    {\r\n      title: 'Barney\\'s Mang Cha-a - CDCP',\r\n      insideSourceTown: false,\r\n      distanceFromSourceTown: 4.5,\r\n      baseRate: 50.00,\r\n      perKm: 15.00,\r\n    },\r\n    {\r\n      title: 'Cake\\'s and Cream Cafe',\r\n      insideSourceTown: false,\r\n      distanceFromSourceTown: 4.5,\r\n      baseRate: 50.00,\r\n      perKm: 15.00,\r\n    },\r\n    {\r\n      title: 'Our Daily Bread Cafe - San Simon',\r\n      insideSourceTown: false,\r\n      distanceFromSourceTown: 5.1,\r\n      baseRate: 50.00,\r\n      perKm: 15.00,\r\n    },\r\n    {\r\n      title: 'Milkfridge - Minalin',\r\n      insideSourceTown: false,\r\n      distanceFromSourceTown: 5.2,\r\n      baseRate: 50.00,\r\n      perKm: 15.00,\r\n    },\r\n    {\r\n      title: 'WingShots - Paligui',\r\n      insideSourceTown: false,\r\n      distanceFromSourceTown: 3.4,\r\n      baseRate: 50.00,\r\n      perKm: 15.00,\r\n    }\r\n  ],\r\n  selectedOption: null,\r\n  actualKm: 0.0,\r\n  additionalStore: 0,\r\n  finalDf: 0.0\r\n}\r\n\r\nexport const calculatorSlice = createSlice({\r\n  name: 'calculator',\r\n  initialState,\r\n  reducers: {\r\n    setSelectedOptions: (state, action) => {\r\n      state.selectedOption = action.payload\r\n    },\r\n    setActualKm: (state, action) => {\r\n      state.actualKm = parseFloat(action.payload)\r\n    },\r\n    setFinalDf: (state, action) => {\r\n      state.finalDf = action.payload\r\n    },\r\n    setAdditionalStore: (state, action) => {\r\n      state.additionalStore = action.payload\r\n    },\r\n    reset: state => initialState\r\n  }\r\n});\r\n\r\nexport const { setSelectedOptions, setActualKm, setFinalDf, setAdditionalStore, reset } = calculatorSlice.actions;\r\nexport const selectCalculator = (state) => state.calculator;\r\nexport default calculatorSlice.reducer;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.css';\r\nimport {\r\n  selectCalculator,\r\n  setSelectedOptions,\r\n  setActualKm,\r\n  setAdditionalStore,\r\n  setFinalDf,\r\n  reset\r\n} from \"./features/calculator/calculatorSlice\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nconst App = () => {\r\n  const calculator = useSelector(selectCalculator);\r\n  const dispatch = useDispatch();\r\n\r\n  const calculate = () => {\r\n    const { selectedOption, actualKm, additionalStore } = calculator;\r\n    const {\r\n      insideSourceTown,\r\n      distanceFromSourceTown,\r\n      baseRate,\r\n      perKm\r\n    } = selectedOption;\r\n\r\n    let finalDf;\r\n    if (insideSourceTown) {\r\n      finalDf = (perKm * (actualKm-1)) + baseRate;\r\n    } else {\r\n      let additionalDf = 0.0;\r\n      if (actualKm <= 2.9) {\r\n        additionalDf = ((distanceFromSourceTown) / 2) * 10;\r\n      }\r\n      finalDf = (perKm * (actualKm-1)) + baseRate + additionalDf;\r\n    }\r\n    dispatch(setFinalDf(finalDf + (additionalStore * 25)));\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <Autocomplete\r\n          value={calculator.selectedOption}\r\n          onChange={(event, newValue) =>\r\n            dispatch(setSelectedOptions(newValue))\r\n          }\r\n          id=\"store-codes\"\r\n          options={calculator.options}\r\n          getOptionLabel={(option) => option.title}\r\n          style={{ minWidth: 300, maxWidth: 400, marginTop: '2rem' }}\r\n          renderInput={(params) => <TextField {...params} label=\"Store Code\" variant=\"outlined\" />}\r\n      />\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"Actual KM\"\r\n        variant=\"outlined\"\r\n        style={{ minWidth: 300, maxWidth: 400, marginTop: '1.5rem' }}\r\n        type={\"number\"}\r\n        onChange={event => dispatch(setActualKm(event.target.value))}\r\n        value={parseFloat(calculator.actualKm) === 0.0 ? '' : parseFloat(calculator.actualKm)}\r\n        disabled={!calculator.selectedOption}\r\n      />\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"Additional Store\"\r\n        variant=\"outlined\"\r\n        style={{ minWidth: 300, maxWidth: 400, marginTop: '1.5rem' }}\r\n        type={\"number\"}\r\n        onChange={event => dispatch(setAdditionalStore(event.target.value))}\r\n        value={parseInt(calculator.additionalStore) === 0.0 ? '' : parseFloat(calculator.additionalStore)}\r\n        disabled={!calculator.selectedOption}\r\n      />      \r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"Final DF\"\r\n        variant=\"outlined\"\r\n        style={{ minWidth: 300, maxWidth: 400,  marginTop: '1.5rem', fontWeight: 'bold' }}\r\n        type={\"number\"}\r\n        value={calculator.finalDf}\r\n        disabled={true}\r\n      />\r\n      <div className=\"buttonWrapper\">\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          style={{\r\n            minWidth: 140, maxWidth: 180,  marginRight: 10, fontWeight: 'bold', color: '#fff'\r\n          }}\r\n          onClick={calculate}\r\n          disabled={!calculator.selectedOption || calculator.actualKm === 0.0}\r\n        >\r\n          Calculate\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          style={{ minWidth: 140, maxWidth: 180, fontWeight: 'bold' }}\r\n          onClick={() => dispatch(reset())}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport calculatorReducer from '../features/calculator/calculatorSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    calculator: calculatorReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffa500',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <App />\r\n        </Provider>\r\n      </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}